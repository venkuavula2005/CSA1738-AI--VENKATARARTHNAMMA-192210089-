def is_safe(board, row, col):
    # Check if there is a queen in the same column up to the current row
    for i in range(row):
        if board[i] == col:
            return False
        # Check diagonals: abs(row-i) == abs(col-board[i])
        if abs(row - i) == abs(col - board[i]):
            return False
    return True

def solve_queens(board, row):
    n = len(board)
    if row == n:
        return True  # All queens are placed successfully

    for col in range(n):
        if is_safe(board, row, col):
            board[row] = col  # Place queen at this position
            if solve_queens(board, row + 1):
                return True
            board[row] = -1  # Backtrack

    return False  # No safe position found in this row

def print_board(board):
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            if board[row] == col:
                line += "Q "
            else:
                line += ". "
        print(line)
    print()

def solve_8_queens():
    n = 8  # Size of the chessboard
    board = [-1] * n  # Initialize board with -1 (no queen placed yet)
    if solve_queens(board, 0):
        print("Solution found:")
        print_board(board)
    else:
        print("No solution exists.")

if __name__ == "__main__":
    solve_8_queens()
