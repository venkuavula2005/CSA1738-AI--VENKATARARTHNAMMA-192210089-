% Define the graph edges and their costs
edge(a, b, 1).
edge(a, c, 3).
edge(b, d, 3).
edge(b, e, 1).
edge(c, f, 5).
edge(d, g, 1).
edge(e, g, 2).
edge(f, g, 2).

% Define heuristic values for each node (heuristic to goal node 'g')
heuristic(a, 6).
heuristic(b, 4).
heuristic(c, 5).
heuristic(d, 2).
heuristic(e, 3).
heuristic(f, 4).
heuristic(g, 0).

% Best First Search algorithm
best_first_search(Start, Goal, Path) :-
    heuristic(Start, H),
    bfs([[Start, H]], Goal, [], Path).

% BFS helper predicate
bfs([[Goal|Path]|_], Goal, _, [Goal|Path]).
bfs([CurrentPath|Paths], Goal, Visited, Result) :-
    extend_path(CurrentPath, NewPaths, Visited),
    append(Paths, NewPaths, Paths1),
    sort_by_heuristic(Paths1, SortedPaths),
    bfs(SortedPaths, Goal, [CurrentPath|Visited], Result).

% Extend the current path
extend_path([Node|Path], NewPaths, Visited) :-
    findall([NewNode, Node|Path],
            (edge(Node, NewNode, _), \+ member(NewNode, Visited)),
            NewPaths).

% Sort paths by their heuristic values
sort_by_heuristic(Paths, SortedPaths) :-
    map_list_to_pairs(path_heuristic, Paths, Pairs),
    keysort(Pairs, SortedPairs),
    pairs_values(SortedPairs, SortedPaths).

% Calculate the heuristic value of a path
path_heuristic([Node|_], H) :-
    heuristic(Node, H).

% Entry point to start the search
find_path(Start, Goal) :-
    best_first_search(Start, Goal, Path),
    reverse(Path, CorrectPath),
    write('Path: '), write(CorrectPath), nl.
