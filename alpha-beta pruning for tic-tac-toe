import math

# Function to print the board
def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

# Function to check for a winner
def check_winner(board, player):
    # Check rows
    for row in board:
        if all([cell == player for cell in row]):
            return True
    # Check columns
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True
    # Check diagonals
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2-i] == player for i in range(3)]):
        return True
    return False

# Function to check for a draw
def check_draw(board):
    return all([cell != ' ' for row in board for cell in row])

# Function to evaluate the board state
def evaluate(board):
    if check_winner(board, 'X'):
        return 1
    elif check_winner(board, 'O'):
        return -1
    else:
        return 0

# Alpha-Beta pruning function
def alphabeta(board, depth, alpha, beta, is_maximizing):
    score = evaluate(board)
    if score == 1 or score == -1:
        return score
    if check_draw(board):
        return 0

    if is_maximizing:
        max_eval = -math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'X'
                    eval = alphabeta(board, depth + 1, alpha, beta, False)
                    board[row][col] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
        return max_eval
    else:
        min_eval = math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'O'
                    eval = alphabeta(board, depth + 1, alpha, beta, True)
                    board[row][col] = ' '
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
        return min_eval

# Function to find the best move
def find_best_move(board):
    best_move = None
    best_value = -math.inf
    for row in range(3):
        for col in range(3):
            if board[row][col] == ' ':
                board[row][col] = 'X'
                move_value = alphabeta(board, 0, -math.inf, math.inf, False)
                board[row][col] = ' '
                if move_value > best_value:
                    best_move = (row, col)
                    best_value = move_value
    return best_move

# Main function
def main():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'

    while True:
        print_board(board)
        if current_player == 'X':
            move = find_best_move(board)
            if move:
                board[move[0]][move[1]] = 'X'
            else:
                print("No moves left. It's a draw!")
                break
        else:
            move = int(input(f"Player {current_player}, enter your move (1-9): ")) - 1
            row, col = move // 3, move % 3
            if board[row][col] == ' ':
                board[row][col] = 'O'
            else:
                print("Invalid move. Try again.")
                continue

        if check_winner(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break
        if check_draw(board):
            print_board(board)
            print("The game is a draw!")
            break

        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    main()
