import heapq

class PuzzleState:
    def _init_(self, board, goal, moves=0, previous=None):
        self.board = board
        self.goal = goal
        self.moves = moves
        self.previous = previous

    def _lt_(self, other):
        return (self.moves + self.manhattan_distance()) < (other.moves + other.manhattan_distance())

    def manhattan_distance(self):
        distance = 0
        goal_flat = [num for row in self.goal for num in row]
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    goal_index = goal_flat.index(self.board[i][j])
                    goal_x, goal_y = divmod(goal_index, 3)
                    distance += abs(i - goal_x) + abs(j - goal_y)
        return distance

    def get_neighbors(self):
        neighbors = []
        i, j = next((i, j) for i in range(3) for j in range(3) if self.board[i][j] == 0)
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        for direction in directions:
            x, y = i + direction[0], j + direction[1]
            if 0 <= x < 3 and 0 <= y < 3:
                new_board = [row[:] for row in self.board]
                new_board[i][j], new_board[x][y] = new_board[x][y], new_board[i][j]
                neighbors.append(PuzzleState(new_board, self.goal, self.moves + 1, self))
        return neighbors

    def is_goal(self):
        return self.board == self.goal

def solve_puzzle(start, goal):
    start_state = PuzzleState(start, goal)
    frontier = []
    heapq.heappush(frontier, start_state)
    explored = set()
    explored.add(tuple(map(tuple, start_state.board)))

    while frontier:
        current_state = heapq.heappop(frontier)

        if current_state.is_goal():
            return reconstruct_path(current_state)

        for neighbor in current_state.get_neighbors():
            neighbor_tuple = tuple(map(tuple, neighbor.board))
            if neighbor_tuple not in explored:
                heapq.heappush(frontier, neighbor)
                explored.add(neighbor_tuple)

    return None

def reconstruct_path(state):
    path = []
    while state:
        path.append(state.board)
        state = state.previous
    path.reverse()
    return path

def print_puzzle(board):
    for row in board:
        print(' '.join(str(num) if num != 0 else ' ' for num in row))
    print()

if _name_ == "_main_":
    start = [
        [1, 2, 3],
        [4, 0, 5],
        [7, 8, 6]
    ]

    goal = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 0]
    ]

    solution = solve_puzzle(start, goal)

    if solution:
        print("Solution found in {} moves:".format(len(solution) - 1))
        for step in solution:
            print_puzzle(step)
    else:
        print("No solution found.")
